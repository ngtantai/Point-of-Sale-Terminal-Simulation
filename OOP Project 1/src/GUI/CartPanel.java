package GUI;

import Catalog.Product;
import Catalog.Stock;
import static GUI.InventoryPanel.productSelected;
import Transactions.Payment;
import java.awt.Font;
import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import static java.util.Collections.list;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author Jose Ortiz 
 * 
 * CSC648 This class extends JPanel and handles all the
 * functionality inside of the CartPanel such as holding products added to the
 * cart, keeping track of the total amount and removing or clearing the cartList
 */
public class CartPanel extends javax.swing.JPanel {

    private PostGUI masterPost; //reference to the parent master GUI
    InventoryPanel inventoryPanel;
    DefaultListModel cartModel;
    ArrayList<Product> cartProducts;
    private final DecimalFormat df = new DecimalFormat("#.##");

    /**
     * Constructor
     *
     * @param _masterPost connection the the main Post frame (client)
     * @throws RemoteException
     */
    public CartPanel(PostGUI _masterPost) throws RemoteException {
        masterPost = _masterPost;
        inventoryPanel = new InventoryPanel(masterPost);
        initComponents();
        cartModel = new DefaultListModel();
        cartList.setModel(cartModel);
        cartList.setFont(new Font("monospaced", Font.PLAIN, 10));
        cartProducts = new ArrayList<>();
        totalField.setText(df.format(0));
    }

    /**
     *
     * @return an array of Products objects added to the cartList
     */
    public ArrayList<Product> getProductsFromCart() {
        return cartProducts;
    }

    /**
     * Clear Cart List
     */
    public void clear() {
        cartProducts = new ArrayList<>();
        cartModel.clear();
        totalField.setText(df.format(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartList = new javax.swing.JList();
        itemLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        exPriceLabel = new javax.swing.JLabel();
        totalField = new javax.swing.JTextField();
        totalLabel = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(212, 212, 212));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CART", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Sylfaen", 1, 18))); // NOI18N

        cartList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(cartList);

        itemLabel.setText("Item");

        quantityLabel.setText("Qty");

        priceLabel.setText("Unit_Pice");

        exPriceLabel.setText("Ex_Price");

        totalField.setEditable(false);
        totalField.setToolTipText("0.00");
        totalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalFieldActionPerformed(evt);
            }
        });

        totalLabel.setText("Total:");

        clearBtn.setText("Clear Cart");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove Item");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(itemLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quantityLabel)
                        .addGap(31, 31, 31)
                        .addComponent(priceLabel)
                        .addGap(18, 18, 18)
                        .addComponent(exPriceLabel)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(removeBtn)
                                .addGap(16, 16, 16)
                                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemLabel)
                    .addComponent(quantityLabel)
                    .addComponent(priceLabel)
                    .addComponent(exPriceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalLabel)
                    .addComponent(clearBtn)
                    .addComponent(removeBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 86, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void addDoubleClickedProduct() {
        Stock catalog = this.masterPost.getLocalCatalog();
        Product product = catalog.getProduct(InventoryPanel.productSelected);
        //check if exists

        product.setQuantity(1);
        double ex_price = product.getPrice();

        String productToString = String.format("%s %5s %10s %10s",
                product.getDescription(),
                1,
                product.getPrice(),
                ex_price);

        cartModel.addElement(productToString);
        cartProducts.add(product);
        totalField.setText(df.format(Payment.calculateTotal(cartProducts)));

    }

    /**
     * Check if a product is already added to the cart
     *
     * @param productToLookUp
     * @return the duplicated Product Object
     */
    public Product isInCart(Product productToLookUp) {

        if (cartProducts.size() == 0) {
            return null;
        }

        for (Product cartProduct : cartProducts) {
            if (cartProduct.getUPC().equals(productToLookUp.getUPC())) {
                return cartProduct;
            }
        }

        return null;

    }

    /**
     * Add a product to the cartList
     *
     * @param productIndex index of the product selected on the inventory list
     * @param quantity desired quantity of the same product
     */
    public void addProduct(int productIndex, int quantity) {
        Stock catalog = this.masterPost.getLocalCatalog();
        Product product = catalog.getProduct(InventoryPanel.productSelected);
        product.setQuantity(quantity);
        double ex_price = product.getQuantity() * product.getPrice();

        String productToString = String.format("%s %5s %10s %10s",
                product.getDescription(),
                product.getQuantity(),
                product.getPrice(),
                ex_price);

        cartModel.addElement(productToString);

        cartProducts.add(product);
        totalField.setText(df.format(Payment.calculateTotal(cartProducts)));
    }

    private void totalFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalFieldActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        clear();
    }//GEN-LAST:event_clearBtnActionPerformed

    /**
     * Remove a Product from the CartList
     *
     * @param evt Action event send to the cartList
     */
    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int index = cartList.getSelectedIndex();
        if (index >= 0) {
            //Object o = cartList.getModel().getElementAt(index);
            //productSelected = index;
            cartModel.remove(index);
            cartProducts.remove(index);
            totalField.setText(df.format(Payment.calculateTotal(cartProducts)));

        }
    }//GEN-LAST:event_removeBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList cartList;
    private javax.swing.JButton clearBtn;
    private javax.swing.JLabel exPriceLabel;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JButton removeBtn;
    private javax.swing.JTextField totalField;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables
}
